from pysat.solvers import Glucose3
from pysat.formula import CNF

def sud2sat2(sudoku):
    """Encode a Sudoku puzzle into CNF for SAT solver using efficient encoding."""
    cnf = CNF()
    n = 9  # Sudoku size

    # Helper function to calculate variable numbers
    def var(i, j, k):
        return 81 * (i - 1) + 9 * (j - 1) + k

    # Cell constraints: each cell contains at least one number
    for i in range(1, n + 1):
        for j in range(1, n + 1):
            cnf.append([var(i, j, k) for k in range(1, n + 1)])

    # Row and column constraints: each number appears at most once per row/column
    for k in range(1, n + 1):
        for i in range(1, n + 1):
            for j in range(1, n):
                for l in range(j + 1, n + 1):
                    cnf.append([-var(i, j, k), -var(i, l, k)])  # Row
                    cnf.append([-var(j, i, k), -var(l, i, k)])  # Column

    # Sub-grid constraints: each number appears at most once per sub-grid
    for k in range(1, n + 1):
        for a in range(0, 3):
            for b in range(0, 3):
                for u in range(1, 4):
                    for v in range(1, 4):
                        for w in range(v + 1, 4):
                            i = 3 * a + u
                            j = 3 * b + v
                            l = 3 * b + w
                            cnf.append([-var(i, j, k), -var(i, l, k)])
                            cnf.append([-var(j, i, k), -var(l, i, k)])

    # Pre-filled cells
    for i in range(1, n + 1):
        for j in range(1, n + 1):
            if sudoku[i-1][j-1] != 0:
                k = sudoku[i-1][j-1]
                cnf.append([var(i, j, k)])

    return cnf

def sat2sud2(solution):
    """Decode SAT solver output back into a Sudoku puzzle."""
    n = 9  # Sudoku size
    sudoku = [[0 for _ in range(n)] for _ in range(n)]
    for var in solution:
        if var > 0:
            i, j, k = (var - 1) // 81 + 1, ((var - 1) % 81) // 9 + 1, (var - 1) % 9 + 1
            sudoku[i-1][j-1] = k
    return sudoku

# Example Sudoku puzzle (0 represents empty cells)
sudoku = [
    [5, 3, 0, 0, 7, 0, 0, 0, 0],
    [6, 0, 0, 1, 9, 5, 0, 0, 0],
    [0, 9, 8, 0, 0, 0, 0, 6, 0],
    [8, 0, 0, 0, 6, 0, 0, 0, 3],
    [4, 0, 0, 8, 0, 3, 0, 0, 1],
    [7, 0, 0, 0, 2, 0, 0, 0, 6],
    [0, 6, 0, 0, 0, 0, 2, 8, 0],
    [0, 0, 0, 4, 1, 9, 0, 0, 5],
    [0, 0, 0, 0, 8, 0, 0, 7, 9],
]

# Solve the puzzle
cnf = sud2sat2(sudoku)
solver = Glucose3()
solver.append_formula(cnf)
if solver.solve():
    solution = solver.get_model()
    solved_sudoku = sat2sud2(solution)
    print("Solved Sudoku:")
    for row in solved_sudoku:
        print(row)
else:
    print("No solution found.")

